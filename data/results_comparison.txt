m,n,k,time (s),gigapixels per second

original:
8192,8192,3,0.102092,0.657340
8192,8192,5,0.199803,0.335875
8192,8192,7,0.359364,0.186744
8192,8192,9,0.588336,0.114066
8192,8192,11,0.902063,0.074395
8192,8192,13,1.244303,0.053933
8192,8192,15,1.664495,0.040318

no returns, added to output param:
8192,8192,3,0.078902,0.850539
8192,8192,5,0.173017,0.387875
8192,8192,7,0.352598,0.190327
8192,8192,9,0.562833,0.119234
8192,8192,11,0.866832,0.077419
8192,8192,13,1.217025,0.055142
8192,8192,15,1.623677,0.041331
# convolution/convolution.cpp:34:             sum += image[i+n][j+o] * kernel.values[n][o];
	.loc 2 34 0 discriminator 2
	movzbl	(%rcx,%rax), %edx	# MEM[base: _100, index: o_108, offset: 0], MEM[base: _100, index: o_108, offset: 0]
	vxorps	%xmm0, %xmm0, %xmm0	# tmp256
	vcvtsi2ss	%edx, %xmm0, %xmm0	# MEM[base: _100, index: o_108, offset: 0], tmp256, tmp256
	vfmadd231ss	(%rsi,%rax,4), %xmm0, %xmm1	# MEM[base: _73, index: o_108, step: 4, offset: 0], tmp256, sum
	

even basic code seems to use vector operations and I don't understand why it's so slow

changed to tile image: (slower!!!)
8192,8192,3,0.699037,0.096002
8192,8192,5,1.840998,0.036452
8192,8192,7,2.322073,0.028900
8192,8192,9,2.304248,0.029124
8192,8192,11,3.169303,0.021175
8192,8192,13,4.797498,0.013988
8192,8192,15,5.483041,0.012239

with "#pragma omp for collapse(2)"
8192,8192,3,0.104995,0.639164
8192,8192,5,0.222115,0.302135
8192,8192,7,0.439452,0.152710
8192,8192,9,0.700410,0.095814
8192,8192,11,1.041413,0.064440
8192,8192,13,1.486881,0.045134
8192,8192,15,1.890587,0.035496

with only "#pragma omp for"
8192,8192,3,0.098060,0.684368
8192,8192,5,0.222470,0.301653
8192,8192,7,0.399407,0.168021
8192,8192,9,0.668382,0.100405
8192,8192,11,1.051807,0.063803
8192,8192,13,1.462699,0.045880
8192,8192,15,1.827963,0.036712

with innermost 2 for loops unrolled
8192,8192,5,0.286360,0.234351
(slightly SLOWER)
Assembly for the part that actually does the work:
# convolution/convolution.cpp:30:         sum += image[y-2][x-2] * blur_kernels[5][0][0];
	.loc 2 30 0
	movq	0(%rbp), %r15	# *.omp_data_i_9(D).image, _31
	vxorpd	%xmm2, %xmm2, %xmm2	# tmp480
	divq	%r14	# width
	movq	%rbx, (%rsp)	# _1491, %sf

aligned alloc:
8192,8192,5,0.126838,0.529091
(DOUBLE performance zomg)

hand-written intrinsics:

