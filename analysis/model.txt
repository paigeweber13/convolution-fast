Question: How many Flops needs to be done to compute a convolution of dimension
k on a image of size n × m?
 - for now, let's ignore edge cases
 - need to do n*m convolutions
 - each convolution requires k * k floating mul and k * k floating
   adds.
 - below is a funciton f that computes number of flops for a given k, n, and m
 - f(k, n, m) = n * m * 2 * k * k 

Question: How much memory needs to be moved to compute a convolution of
dimension k on a image of size n × m?
 - need to read k * k * datatype_size bytes for convolution matrix 
 - need to read n * m * datatype_size bytes for input matrix
 - need to write n * n * datatype_size bytes for output
totals: 
 - read/write (n * m) * datatype_size bytes
 - read only: k * k * datatype_size bytes

Question: Assuming the performance numbers you measured in assignment 1 and 2,
how long should computing a convolution of dimension 3 on an image of 1024 ×
768 take?
 - performance numbers: 1.64 TFlop/s and 100 GB/s bandwidth
 - flop performance in pixels/second: num_pixels / flop_time
        num_pixels/(flops_to_compute/flops_per_s_possible_on_machine)
        n * m/(n * m * 2 * k * k /1.64e12)
 - memory performance in pixels/second: num_pixels / mem_time
        num_pixels/(sum of each bandwidth type for: (num_bytes_to_access/bandwidth_in_bytes))
        n * m/(((n * m) * datatype_size/3.3e10) + (k*k*datatype_size/1e11))
        
 - for k = 3, n = 1024, m = 768, datatype_size = 1 (uint8):
       - flop performance bound is 9.1e10 pixels per second
       - mem performance bound is 2.9e3 pixels per second

Question: What about a convolution of dimension 11 ? On this kind of problem,
performance is usually reported in pixel processed per second.
 - for k = 11, n = 1024, m = 768, datatype_size = 1 (uint8):
       - flop performance bound is 6.7e9 pixels per second
       - mem performance bound is 2.1e2 pixels per second

Question: Plot maximum expected performance as a function of k.
